//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestAutomation.Client.Test.ClientService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualMachineManagerType", Namespace="http://schemas.datacontract.org/2004/07/TestAutomation.Client.Service")]
    public enum VirtualMachineManagerType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VirtualBox = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientService.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetVirtualMachineManager", ReplyAction="http://tempuri.org/IClientService/GetVirtualMachineManagerResponse")]
        System.Guid GetVirtualMachineManager(TestAutomation.Client.Test.ClientService.VirtualMachineManagerType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetVirtualMachineManager", ReplyAction="http://tempuri.org/IClientService/GetVirtualMachineManagerResponse")]
        System.Threading.Tasks.Task<System.Guid> GetVirtualMachineManagerAsync(TestAutomation.Client.Test.ClientService.VirtualMachineManagerType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/ListVirtualMachines", ReplyAction="http://tempuri.org/IClientService/ListVirtualMachinesResponse")]
        System.Guid[] ListVirtualMachines(System.Guid managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/ListVirtualMachines", ReplyAction="http://tempuri.org/IClientService/ListVirtualMachinesResponse")]
        System.Threading.Tasks.Task<System.Guid[]> ListVirtualMachinesAsync(System.Guid managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/StartVirtualMachine", ReplyAction="http://tempuri.org/IClientService/StartVirtualMachineResponse")]
        void StartVirtualMachine(System.Guid vmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/StartVirtualMachine", ReplyAction="http://tempuri.org/IClientService/StartVirtualMachineResponse")]
        System.Threading.Tasks.Task StartVirtualMachineAsync(System.Guid vmId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : TestAutomation.Client.Test.ClientService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<TestAutomation.Client.Test.ClientService.IClientService>, TestAutomation.Client.Test.ClientService.IClientService {
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid GetVirtualMachineManager(TestAutomation.Client.Test.ClientService.VirtualMachineManagerType type) {
            return base.Channel.GetVirtualMachineManager(type);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetVirtualMachineManagerAsync(TestAutomation.Client.Test.ClientService.VirtualMachineManagerType type) {
            return base.Channel.GetVirtualMachineManagerAsync(type);
        }
        
        public System.Guid[] ListVirtualMachines(System.Guid managerId) {
            return base.Channel.ListVirtualMachines(managerId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> ListVirtualMachinesAsync(System.Guid managerId) {
            return base.Channel.ListVirtualMachinesAsync(managerId);
        }
        
        public void StartVirtualMachine(System.Guid vmId) {
            base.Channel.StartVirtualMachine(vmId);
        }
        
        public System.Threading.Tasks.Task StartVirtualMachineAsync(System.Guid vmId) {
            return base.Channel.StartVirtualMachineAsync(vmId);
        }
    }
}
